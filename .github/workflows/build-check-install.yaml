name: R CMD Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-install-check:
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.config.image }}:${{ matrix.config.tag }}
    name: ${{ matrix.config.image }}, version ${{ matrix.config.tag }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {image: ghcr.io/insightsengineering/tidyverse_4.1.0_bioc_3.13, tag: latest}

    steps:
      - name: Gather info from PR
        uses: actions/github-script@v4
        id: get-pr
        if: github.event_name == 'pull_request'
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

# TODO check if R is installed
# TODO ensure that git and qpdf are installed in the docker image
# TODO also use R remotes::system_requirements() to get the correct system dependencies

      - name: Checkout repo during PR
        uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }}
          path: ${{ github.event.repository.name }}

      - name: Checkout repo from push
        uses: actions/checkout@v2
        if: github.event_name == 'push'
        with:
          path: ${{ github.event.repository.name }}

      - name: Print Branch Name
        run: |
           cd ${{ github.event.repository.name }}
           git branch --show-current
        shell: bash

      - name: Install Dependencies
        run: |
          setwd("${{ github.event.repository.name }}")
          options(repos = c(CRAN = "https://cloud.r-project.org/"))
          ncores <- parallel::detectCores(all.tests = FALSE, logical = TRUE)
          cat(paste("\n\nnumber of cores detected:", ncores, "\n\n"))
          if (file.exists("renv.lock")) {
            if (!("renv" %in% installed.packages())) install.packages("renv", upgrade = "never", Ncpus = ncores)
            renv::restore()
          } else {
            if (!("remotes" %in% installed.packages())) install.packages("remotes", upgrade = "never", Ncpus = ncores)
            remotes::install_deps(dependencies = TRUE, upgrade = "never", Ncpus = ncores)
          }

          if (file.exists("staged_dependencies.yaml")) {
            if (!("remotes" %in% installed.packages())) install.packages("remotes", upgrade = "never", Ncpus = ncores)
            remotes::install_github("openpharma/staged.dependencies", ref = "main", Ncpus = ncores)
            cat("\nInstall Staged Dependencies\n\n\n")
            staged.dependencies::install_deps(install_project = FALSE, verbose = TRUE)
          }
        shell: Rscript {0}
        env:
          GITHUB_PAT: ${{ secrets.REPO_GITHUB_TOKEN }} # or ${{ secrets.GITHUB_TOKEN }}

      - name: Build R package
        run: |
          R CMD build ${{ github.event.repository.name }}
          echo "PKGBUILD=$(echo *.tar.gz)" >> $GITHUB_ENV
        shell: bash

# TODO: if configurable then --as-cran optionally
      - name: Run R CMD CHECK
        run: R CMD check --no-manual ${{ env.PKGBUILD }}
        shell: bash
        continue-on-error: true

      - name: Parse check output for posting as PR comment
        if: github.event_name == 'pull_request'
        id: check
        run: |
          # Convert UTF-8 encoded check output to ASCII
          iconv -sc \
            -f UTF-8 \
            -t ascii//TRANSLIT \
            -o ${{ github.event.repository.name }}.Rcheck/00check.ascii \
            ${{ github.event.repository.name }}.Rcheck/00check.log
          # Escape backslashes
          sed -i -e 's/\\/\\\\/g' ${{ github.event.repository.name }}.Rcheck/00check.ascii
          # https://trstringer.com/github-actions-multiline-strings/
          output=$(cat ${{ github.event.repository.name }}.Rcheck/00check.ascii)
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=check-output::$output"
          status=$(tail -1 ${{ github.event.repository.name }}.Rcheck/00check.ascii)
          echo "::set-output name=check-status::$status"
        shell: bash


# TODO: only if there are Errors, warnings, or notes
      - name: Post check output as PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: R CMD check for R v${{ matrix.config.tag }}
          message: |
            #### R CMD check for R v${{ matrix.config.tag }}

            `R CMD check` resulted in `${{ steps.check.outputs.check-status }}`

            <details><summary>Click here to show full output</summary>

            ```R
            ${{ steps.check.outputs.check-output }}
            ```

            </details>

            *Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`*


      - name: Catch warnings in R CMD check output
        id: catch-errors
        run: |
          x <- tail(readLines("${{ github.event.repository.name }}.Rcheck/00check.log"), 1)
          if (!grepl("^Status", x)) stop("No status line found in R CMD check log")
          if (grepl("ERROR", x)) stop("R CMD check has errors")
          if (grepl("WARNING", x)) stop("R CMD check has warnings")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.tag }}-results
          path: ${{ github.event.repository.name }}.Rcheck/00check.log

      - name: Check whether JUnit XML report exists
        id: check_junit_xml
        uses: andstor/file-existence-action@v1
        with:
          files: "${{ github.event.repository.name }}.Rcheck/tests/testthat/junit-result.xml"

      - name: Publish Unit Test Summary
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ steps.check_junit_xml.outputs.files_exists == 'true' && github.event_name == 'pull_request' }}
        with:
          check_name: Unit Tests Summary
          files: "${{ github.event.repository.name }}.Rcheck/tests/testthat/junit-result.xml"

      - name: Convert JUnit XML Test Results to Markdown
        id: xml2md
        if: ${{ steps.check_junit_xml.outputs.files_exists == 'true' && github.event_name == 'pull_request' }}
        run: |
          wget -q https://github.com/dinakar29/junit2md/releases/download/v0.1.0/junit2md_0.1.0_linux-amd64 -O /tmp/junit2md
          chmod +x /tmp/junit2md
          output="$(/tmp/junit2md ${{ github.event.repository.name }}.Rcheck/tests/testthat/junit-result.xml)"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=test-results-md::$output"
        shell: bash

      - name: Post Unit Test Details
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.check_junit_xml.outputs.files_exists == 'true' && github.event_name == 'pull_request' }}
        with:
          header: Unit Test Details
          message: |
            ## Unit Test Details

            ${{ steps.xml2md.outputs.test-results-md }}

      - name: Install R package
        run: R CMD INSTALL ${{ env.PKGBUILD }}
        shell: bash
