% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ref_strategy.R
\name{determine_ref}
\alias{determine_ref}
\title{Determine the branch/tag to install based on feature (staging rules)}
\usage{
determine_ref(ref, available_refs, branch_sep = "@", fallback_branch = "main")
}
\arguments{
\item{ref}{ref we want to build}

\item{available_refs}{data.frame with columns \code{ref} the names of the available refs
and \code{type} (\code{branch} or \code{tag})}

\item{branch_sep}{separator between branches in \code{feature}, \code{/} does not
work well with \code{git} because it clashes with the filesystem paths}

\item{fallback_branch}{the default branch to try to use if no other matches found}
}
\value{
branch/tag to choose to match feature, error if no suitable branch was provided
with the type attribute "tag" or "branch"
}
\description{
Return the git ref (tag or branch) of the repo to install given the available branches and tags.
}
\details{
A ref is either a tag or branches separated by slashes of the form \code{name1@name2@...@nameN}.
Where separator is specified by \code{branch_sep} argument

This function checks for an exact match for the tag if this is not found then
among the available branches, it searches in the order
\code{name1@name2@...@nameN}, \code{name2@name3@...@nameN}, \code{name3@name4@...@nameN}, ..., \code{nameN}
}
\examples{
determine_ref("feature1",
  data.frame(ref = c("main", "feature1"), type = "branch")
) == structure("feature1", type = "branch")

determine_ref("feature1@devel",
  data.frame(ref = c("main", "devel", "feature1"), type = "branch")
) == structure("devel", type = "branch")

determine_ref(
  ref = "fix1@feature1@devel",
  available_refs = data.frame(
    ref = c("main", "devel", "feature1", "feature1@devel",
    "fix1@feature1@devel", "fix1"),
    type = "branch")
) == structure("fix1@feature1@devel", type = "branch")

determine_ref(
  "fix1@feature1@devel",
  data.frame(ref = c("main", "devel", "feature1", "feature1@devel", "fix1"),
             type = "branch")
) == structure("feature1@devel", type = "branch")

determine_ref(
  "fix1@feature1@devel",
  data.frame(ref = c("main", "devel", "feature1", "fix1"), type = "branch")
) == structure("devel", type = "branch")

determine_ref("feature1@release", data.frame(ref = c("main", "devel"), type = "branch"))

# error because neither `feature1@release` nor `release` branch exists
# determine_ref("feature1@release", data.frame(ref = c("master", "devel"), type = "branch"))

# tag examples
determine_ref("v0.1",
  data.frame(ref = c("main", "devel", "feature1", "v0.1"), type = c(rep("branch", 3), "tag"))
) == structure("v0.1", type = "tag")

determine_ref("v0.2",
  data.frame(ref = c("main", "devel", "feature1", "v0.1"), type = c(rep("branch", 3), "tag"))
) == structure("main", type = "branch")


}
