% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependencies.R
\name{build_check_install}
\alias{build_check_install}
\title{Build, check and install internal dependencies}
\usage{
build_check_install(
  dep_structure,
  install_direction = "all",
  steps = c("build", "check", "install"),
  rcmd_args = list(check = c("--no-multiarch", "--with-keep.source",
    "--install-tests")),
  artifact_dir = tempfile(),
  install_external_deps = TRUE,
  upgrade = "never",
  package_list = NULL,
  dry = FALSE,
  verbose = 1,
  ...
)
}
\arguments{
\item{dep_structure}{(\code{dependency_structure}) output of function
\code{dependency_table}; uses \code{dep_structure$table} to infer the packages
to apply action to and infer installation order;
uses \code{dep_structure$deps} to infer upstream dependencies}

\item{install_direction}{"upstream", "downstream" or "all"; which packages
to install (according to dependency structure). By default this is only "upstream"}

\item{steps}{(\code{character} vector) subset of "build", "check", "install";
useful to skip checking for example}

\item{rcmd_args}{(\code{list}) with names \code{build}, \code{check},
\code{install} which are vectors that are passed as separate arguments
to the \verb{R CMD} commands}

\item{artifact_dir}{(\code{character}) directory to place built R packages
and logs}

\item{install_external_deps}{logical to describe whether to install
external dependencies of package using \code{\link[remotes:install_deps]{remotes::install_deps()}} (or \code{\link[renv:install]{renv::install()}} if
inside an renv environment) .}

\item{upgrade}{argument passed to \code{\link[remotes:install_deps]{remotes::install_deps()}}, defaults to \code{'never'}. Ignored
if inside an \code{renv} environment.}

\item{package_list}{(\code{character}) If not NULL, an additional filter, only packages on this
list will be considered and their dependencies installed if needed (advanced usage only).}

\item{dry}{(\code{logical}) dry run that outputs what would happen without actually
doing it.}

\item{verbose}{verbosity level, incremental; from 0 (none) to 2 (high)}

\item{...}{
  Arguments passed on to \code{\link[=install_deps]{install_deps}}
  \describe{
    \item{\code{install_project}}{(\code{logical}) whether to also install the current
package (i.e. the package named in \code{dependency_structure$current_pkg}),
ignored unless \code{install_direction = "upstream"} (because downstream
deps automatically install all their upstream deps)}
  }}
}
\value{
list with entries
\itemize{
\item artifact_dir: \code{artifact_dir} directory with log files
\item pkg_actions: \code{data.frame} of performed actions
}
}
\description{
Build, check and install internal dependencies
}
\examples{
\dontrun{
  x <- dependency_table(project = ".", verbose = 1)
  build_check_install(x, steps = c("build", "check"), verbose = 1)
  build_check_install(x, artifact_dir = "../output")

}
}
