% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependencies.R
\name{dependency_table}
\alias{dependency_table}
\title{Create dependency structure of your package collection}
\usage{
dependency_table(
  project = ".",
  project_type = c("local", "repo@host")[1],
  ref = NULL,
  local_repos = if ((project_type) == "local") get_local_pkgs_from_config() else NULL,
  direction = "all",
  fallback_branch = "main",
  renv_profile = NULL,
  verbose = 1
)
}
\arguments{
\item{project}{(\code{character}) If \code{project_type} is \code{local} then
directory of project (for which to calculate the dependency structure);
must be a git repository. If \code{project_type} is \code{repo@host} then should
be character of the form \verb{openpharma/stageddeps.food@https://github.com}
If host is not included in the string then the default \verb{https://github.com}
is assumed.}

\item{project_type}{(\code{character}) See \code{project} argument}

\item{ref}{(\code{character}) git branch (or tag) inferred from the
branch of the project if not provided; warning if not consistent with
current branch of project. If \code{project_type} is not \code{local} then this argument
must be provided}

\item{local_repos}{(\code{data.frame}) repositories that should be taken from
local file system rather than cloned; columns are \verb{repo, host, directory}}

\item{direction}{(\code{character}) direction in which to discover packages
either "upstream","downstream" or "all".}

\item{fallback_branch}{(\code{character}) the default branch to try to use if
no other matches found}

\item{renv_profile}{(\code{character}) the name of the renv profile of the \code{renv.lock} files
to be included from the repos. The standard \code{renv.lock} file uses the default \code{NULL} argument here.}

\item{verbose}{(\code{numeric}) \cr verbosity level, incremental;
(0: None, 1: packages that get installed + high-level git operations,
2: includes git checkout infos)}
}
\value{
\code{dependency_structure} An S3 object with the following items:
\describe{
\item{project}{\code{project} argument used to create
the object (absolute path if \code{project_type} is \code{local}}
\item{project_type}{\code{project_type} used to create object}
\item{current_pkg}{The R package name of code in the \code{project} directory}
\item{table}{\code{data.frame} contain one row per r package discovered, with the
following rows \code{package_name}, \code{type} (\code{current}, \code{upstream}, \code{downstream} or \code{other}),
\code{distance} (minimum number of steps from \code{current_pkg}), \code{ref}, \code{repo}, \code{host}, \code{sha}
\code{cache_dir}, \code{accessible}, \code{installable} and \code{install_index} (the order to install the packages).
Note some items are are suppressed when printing the object}
\item{deps}{\code{list} with three elements, \code{upstream_deps}is the graph where edges point from a package
to its upstream dependencies. They are ordered in installation order. The
\code{downstream_deps} list is the graph with the edge direction flipped,
and is ordered in reverse installation order. \code{external} contains the external
R packages found in the description files of the internal packages. It is a dataframe
of the form returned by \code{desc::desc_get_deps}}
\item{direction}{\code{direction} argument used to create object}
\item{renv_files}{\verb{named list} containing the json of the renv.lock files for the chosen profile for
each repo. An entry to the list is \code{NULL} if a repos does not have the required lock file}
}
}
\description{
Create dependency structure of your package collection
}
\examples{
\dontrun{
dependency_table(verbose = 1)
dependency_table(
  project = "openpharma/stageddeps.food@https://github.com",
  project_type = "repo@host",
  ref = "main"
)
x <- dependency_table(
  project = "path/to/project",
  direction = c("upstream")
)
print(x)
plot(x)
}
}
