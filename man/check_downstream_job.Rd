% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rstudio_jobs.R
\name{check_downstream_job}
\alias{check_downstream_job}
\title{Check & install downstream job}
\usage{
check_downstream_job(project = ".", verbose = 1, ...)
}
\arguments{
\item{project}{(\code{character}) directory of project (for which to restore the
dependencies according to feature); must be a git repository.}

\item{verbose}{(\code{numeric}) verbosity level, incremental;
(0: None, 1: packages that get installed + high-level git operations,
2: includes git checkout infos)}

\item{...}{
  Arguments passed on to \code{\link[=check_downstream]{check_downstream}}
  \describe{
    \item{\code{downstream_repos}}{(\code{list}) to overwrite the downstream repos to check
of \code{project}}
    \item{\code{dry_install_and_check}}{(\code{logical}) whether to install upstream
dependencies and check/test downstream repos; otherwise just reports
what would be installed}
    \item{\code{recursive}}{(\code{logical}) whether to recursively check the downstream
dependencies of the downstream dependencies;
ignored if \code{downstream_repos} is set}
    \item{\code{check_args}}{(\code{list}) arguments passed to \code{rcmdcheck}}
    \item{\code{only_tests}}{(\code{logical}) whether to only run tests (rather than checks)}
    \item{\code{feature}}{(\code{character}) feature we want to build; inferred from the
branch of the project if not provided; warning if not consistent with
current branch of project}
    \item{\code{local_repos}}{(\code{data.frame}) repositories that should be taken from
local rather than cloned; columns are \verb{repo, host, directory}}
    \item{\code{install_external_deps}}{logical to describe whether to install
external dependencies of package using \code{remotes::install_deps}.}
  }}
}
\description{
Check & install downstream job
}
\examples{
\dontrun{
check_downstream_job(check_args = Sys.getenv("RCMDCHECK_ARGS"))
check_downstream_job(check_args = Sys.getenv("RCMDCHECK_ARGS"), feature = "6_makegraph@main")
check_downstream_job(only_tests = TRUE)
}
}
\seealso{
check_downstream
}
