% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependencies.R
\name{check_downstream}
\alias{check_downstream}
\title{Check & install downstream dependencies}
\usage{
check_downstream(
  project = ".",
  feature = NULL,
  downstream_repos = NULL,
  local_repos = get_local_pkgs_from_config(),
  recursive = TRUE,
  dry_install_and_check = FALSE,
  check_args = NULL,
  only_tests = FALSE,
  verbose = 0,
  install_external_deps = TRUE,
  ...
)
}
\arguments{
\item{project}{(\code{character}) directory of project (for which to restore the
dependencies according to feature); must be a git repository.}

\item{feature}{(\code{character}) feature we want to build; inferred from the
branch of the project if not provided; warning if not consistent with
current branch of project}

\item{downstream_repos}{(\code{list}) to overwrite the downstream repos to check
of \code{project}}

\item{local_repos}{(\code{data.frame}) repositories that should be taken from
local rather than cloned; columns are \verb{repo, host, directory}}

\item{recursive}{(\code{logical}) whether to recursively check the downstream
dependencies of the downstream dependencies;
ignored if \code{downstream_repos} is set}

\item{dry_install_and_check}{(\code{logical}) whether to install upstream
dependencies and check/test downstream repos; otherwise just reports
what would be installed}

\item{check_args}{(\code{list}) arguments passed to \code{rcmdcheck}}

\item{only_tests}{(\code{logical}) whether to only run tests (rather than checks)}

\item{verbose}{(\code{numeric}) verbosity level, incremental;
(0: None, 1: packages that get installed + high-level git operations,
2: includes git checkout infos)}

\item{install_external_deps}{logical to describe whether to install
external dependencies of package using \code{remotes::install_deps}.}

\item{...}{Additional args passed to \verb{remotes::install_deps. Note }upgrade`
is set to "never" and shouldn't be passed into this function.}
}
\value{
\code{data.frame} of installed packages (in installation order) and checked packages
}
\description{
It installs the downstream dependencies and their upstream dependencies,
and then runs \code{rcmdcheck} (\verb{R CMD check}) on the downstream dependencies.
}
\details{
If A <- B (i.e. A is upstream of B), B should list A as upstream. Otherwise,
B will be checked, but may not pick up the right version of A (unless there
are other packages that require A and are processed before B).
If A does not list B as downstream (which can be the case when projects A and
B are unrelated), this will simply mean that check_downstream starting from A
will not check B which is desirable.
This requirement can be verified with \code{dependency_graph} by looking at the arrows.
}
\examples{
\dontrun{
check_downstream(project = ".", verbose = 1)

check_downstream(
  project = "../stageddeps.electricity"
)
}
}
\seealso{
determine_branch
}
