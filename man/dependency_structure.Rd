% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependencies.R
\name{dependency_structure}
\alias{dependency_structure}
\title{Compute the dependency structure starting from project}
\usage{
dependency_structure(
  project = ".",
  feature = NULL,
  local_repos = get_local_pkgs_from_config(),
  direction = c("upstream", "downstream"),
  return_table_only = FALSE,
  verbose = 0
)
}
\arguments{
\item{project}{(\code{character}) directory of project (for which to restore the
dependencies according to feature); must be a git repository.}

\item{feature}{(\code{character}) feature we want to build; inferred from the
branch of the project if not provided; warning if not consistent with
current branch of project}

\item{local_repos}{(\code{data.frame}) repositories that should be taken from
local rather than cloned; columns are \verb{repo, host, directory}}

\item{direction}{(\code{character}) direction in which to discover packages
either or both of "upstream" and "downstream"
to recursively checkout upstream and/or downstream dependencies}

\item{return_table_only}{(\code{logical}) whether to return a table or (table, graph, deps)}

\item{verbose}{(\code{numeric}) verbosity level, incremental;
(0: None, 1: packages that get installed + high-level git operations,
2: includes git checkout infos)}
}
\value{
depending on \code{return_table_only} (see above); either \code{data.frame} or a list with
the following elements:

\code{df}:
\code{data.frame} with columns \verb{repo, host, type, branch}, where \code{type} is:
\itemize{
\item \code{current} (project),
\item \code{upstream} (of project),
\item \code{downstream} (of project),
\item \code{other} (the remaining, e.g. downstream dependencies of upstream dependencies)
}

and \code{branch} is the branch corresponding to \code{feature} and becomes \code{local (branch)}
if package is in \code{local_repos}.

\code{graph}:
visNetwork graph with arrows going in the direction from downstream to upstream.
Arrows are solid if both upstream and downstream list each other; they
are dashed if either does not list the other:
\itemize{
\item if upstream does not list downstream, blue dashed
\item if downstream does not list upstream, red dashed (this means that
the downstream repo's yaml needs to be fixed)
Tooltips give more information about nodes and edges.
}

\code{deps}:
deps: upstream and downstream dependencies of each node

\code{internal_deps}:
internal dependencies, named list mapping hash to path where they were cloned to
}
\description{
Compute the dependency structure starting from project
}
\examples{
\dontrun{
dependency_structure()
}
}
\seealso{
determine_branch
}
